/**
 * DataStructureGenerator- IDL tool to describe exchangeable data.
 * Copyright (C) 2014 - 2015 Christian Berger
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

grammar org.opendavinci.DataModel
  with org.eclipse.xtext.common.Terminals

generate dataModel "http://www.opendavinci.org/DataModel"

Model:
	PackageDeclaration
	messages += Message*;
	
PackageDeclaration:
	{PackageDeclaration}
	('package' package = PackageIdentifier ';')?;

PackageIdentifier:
	ID (('.') ID)*;

Message:
	'message' message = MessageIdentifier ('extends' superMessage = MessageIdentifier)? ('[' 'id' '=' id=NUMBER ']') '{'
		attributes += Attribute*
	'}';

MessageIdentifier:
	ID (('.') ID)*;

TypeIdentifier:
	ID (InternalType* | ExternalType*);

InternalType:
	'.' ID;

ExternalType:
	'::' ID;

Attribute:
	(scalar = ScalarDeclaration |
	 list = ListDeclaration | 
	 map = MapDeclaration | 
	 enumdec = EnumDeclaration |
	 fixedarray = FixedArrayDeclaration |
	 const = ConstDeclaration
	) ';';

ScalarDeclaration:
	type=(TYPE | TypeIdentifier) (isPointer = '*')? name=ID
	('[' ('default' '=' value=(BOOL | NUMBER | STRING | ID))? (',')? ('id' '=' id=NUMBER)? (',')? ('fourbyteid' '=' fourbyteid=(NUMBER|HEXNUMBER))? ']')?;

ListDeclaration:
	modifier=('list') '<' type=(TYPE | TypeIdentifier) '>' name=ID
	('['  ('id' '=' id=NUMBER)? (',')? ('fourbyteid' '=' fourbyteid=(NUMBER|HEXNUMBER))? ']')?;

MapDeclaration:
	modifier=('map') '<' primaryType=TYPE ',' secondaryType=(TYPE | TypeIdentifier) '>' name=ID
	('['  ('id' '=' id=NUMBER)? (',')? ('fourbyteid' '=' fourbyteid=(NUMBER|HEXNUMBER))? ']')?;

EnumDeclaration:
	modifier=('enum') name=ID '{' enumerators += EnumEntry+ '}';

EnumEntry:
	enum_name=ID '=' enum_value=NUMBER ',';

FixedArrayDeclaration:
	type=(TYPE | TypeIdentifier) name=ID '[' size=NUMBER ']'
	('[' ('id' '=' id=NUMBER)? (',')? ('fourbyteid' '=' fourbyteid=(NUMBER|HEXNUMBER))? ']')?;

ConstDeclaration:
	'const' type=TYPE name=ID '=' value=(BOOL | NUMBER | STRING);

TYPE:
	'bool' | 'char' | 'int8' | 'uint8' | 'int16' | 'uint16' | 'int32' | 'uint32' | 'float' | 'double' | 'string';

terminal BOOL: 'true' | 'false';
terminal fragment SIGN: ('+'|'-');
terminal fragment DIGIT: ('0' .. '9');
terminal fragment HEXDIGIT: '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'a'|'b'|'c'|'d'|'e'|'f'|'A'|'B'|'C'|'D'|'E'|'F';
terminal NUMBER: SIGN? DIGIT+ (('.') DIGIT+)?;
terminal HEXNUMBER: '0x' HEXDIGIT+;
